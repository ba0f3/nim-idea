{
  parserClass="im.huy.nim.parser.NimParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Nim"
  psiImplClassSuffix="Impl"
  psiPackage="im.huy.nim.psi"
  psiImplPackage="im.huy.nim.psi.impl"

  elementTypeHolderClass="im.huy.nim.psi.NimTypes"
  elementTypeClass="im.huy.nim.psi.NimElementType"
  tokenTypeClass="im.huy.nim.psi.NimTokenType"
}

file ::= mod_contents

module ::= (stmt ((';' | IIDENT) stmt)*)?
comma ::= ',' COMMENT?
semicolon ::= ';' COMMENT?
colon ::= ':' COMMENT?
colcom ::= ':' COMMENT?
operator ::=  OP0 | OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 | OP8 | OP9
         | 'or' | 'xor' | 'and'
         | 'is' | 'isnot' | 'in' | 'notin' | 'of'
         | 'div' | 'mod' | 'shl' | 'shr' | 'not' | 'static' | '..'
prefixOperator ::= operator
optInd ::= COMMENT?
optPar ::= (IDENT | IIDENT)?
simpleExpr ::= arrowExpr (OP0 optInd arrowExpr)*
arrowExpr ::= assignExpr (OP1 optInd assignExpr)*
assignExpr ::= orExpr (OP2 optInd orExpr)*
orExpr ::= andExpr (OP3 optInd andExpr)*
andExpr ::= cmpExpr (OP4 optInd cmpExpr)*
cmpExpr ::= sliceExpr (OP5 optInd sliceExpr)*
sliceExpr ::= ampExpr (OP6 optInd ampExpr)*
ampExpr ::= plusExpr (OP7 optInd plusExpr)*
plusExpr ::= mulExpr (OP8 optInd mulExpr)*
mulExpr ::= dollarExpr (OP9 optInd dollarExpr)*
dollarExpr ::= primary (OP10 optInd primary)*
symbol ::= '`' (KEYW|IDENT|literal|(operator|'('|')'|'['|']'|'{'|'}'|'=')+)+ '`'
       | IDENT | 'addr' | 'type'
indexExpr ::= expr
indexExprList ::= indexExpr (comma indexExpr)*
exprColonEqExpr ::= expr (':'|'=' expr)?
exprList ::= expr (comma expr)*
dotExpr ::= expr '.' optInd symbol
qualifiedIdent ::= symbol ('.' optInd symbol)?
exprColonEqExprList ::= exprColonEqExpr (comma exprColonEqExpr)* (comma)?
setOrTableConstr ::= '{' ((exprColonEqExpr comma)* | ':' ) '}'
castExpr ::= 'cast' '[' optInd typeDesc optPar ']' '(' optInd expr optPar ')'
parKeyw ::= 'discard' | 'include' | 'if' | 'while' | 'case' | 'try'
        | 'finally' | 'except' | 'for' | 'block' | 'const' | 'let'
        | 'when' | 'var' | 'mixin'
par ::= '(' optInd (&parKeyw complexOrSimpleStmt (';' complexOrSimpleStmt)*
                 | simpleExpr ('=' expr (';' complexOrSimpleStmt (';' complexOrSimpleStmt)* )? )?
                            | (':' expr)? (',' (exprColonEqExpr comma?)*)?  )?
        optPar ')'
literal ::= | INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT
          | UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT
          | FLOAT_LIT | FLOAT32_LIT | FLOAT64_LIT
          | STR_LIT | RSTR_LIT | TRIPLESTR_LIT
          | CHAR_LIT
          | NIL
generalizedLit ::= GENERALIZED_STR_LIT | GENERALIZED_TRIPLESTR_LIT
identOrLiteral ::= generalizedLit | symbol | literal
               | par | arrayConstr | setOrTableConstr
               | castExpr
tupleConstr ::= '(' optInd (exprColonEqExpr comma?)* optPar ')'
arrayConstr ::= '[' optInd (exprColonEqExpr comma?)* optPar ']'
primarySuffix ::= '(' (exprColonEqExpr comma?)* ')' doBlocks?
      | doBlocks
      | '.' optInd symbol generalizedLit?
      | '[' optInd indexExprList optPar ']'
      | '{' optInd indexExprList optPar '}'
      | &( '`'|IDENT|literal|'cast'|'addr'|'type') expr || command syntax
condExpr ::= expr colcom expr optInd
        ('elif' expr colcom expr optInd)*
         'else' colcom expr
ifExpr ::= 'if' condExpr
whenExpr ::= 'when' condExpr
pragma ::= '{.' optInd (exprColonExpr comma?)* optPar ('.}' | '}')
identVis ::= symbol opr?  || postfix position
identWithPragma ::= identVis pragma?
declColonEquals ::= identWithPragma (comma identWithPragma)* comma?
                  (':' optInd typeDesc)? ('=' optInd expr)?
identColonEquals ::= ident (comma ident)* comma?
     (':' optInd typeDesc)? ('=' optInd expr)?)
inlTupleDecl ::= 'tuple'
    [' optInd  (identColonEquals (comma|semicolon)?)*  optPar ']'
extTupleDecl ::= 'tuple'
    COMMENT? (IDENT identColonEquals (IIDENT identColonEquals)*)?
tupleClass ::= 'tuple'
paramList ::= '(' (declColonEquals ((comma|semicolon) declColonEquals)*)? ')'
paramListArrow ::= paramList? ('->' optInd typeDesc)?
paramListColon ::= paramList? (':' optInd typeDesc)?
doBlock ::= 'do' paramListArrow pragmas? colcom stmt
doBlocks ::= (doBlock (IIDENT doBlock)*)?
procExpr ::= 'proc' paramListColon pragmas? ('=' COMMENT? stmt)?
distinct ::= 'distinct' optInd typeDesc
expr ::= (ifExpr
      | whenExpr
      | caseExpr
      | tryExpr)
      | simpleExpr
typeKeyw ::= 'var' | 'ref' | 'ptr' | 'shared' | 'tuple'
         | 'proc' | 'iterator' | 'distinct' | 'object' | 'enum'
primary ::= typeKeyw typeDescK
        |  prefixOperator* identOrLiteral primarySuffix*
        | 'static' primary
        | 'bind' primary
typeDesc ::= simpleExpr
typeDefAux ::= simpleExpr
           | 'concept' typeClass
macroColon ::= ':' stmt? ( IIDENT 'of' exprList ':' stmt
                       | IIDENT 'elif' expr ':' stmt
                       | IIDENT 'except' exprList ':' stmt
                       | IIDENT 'else' ':' stmt )*
exprStmt ::= simpleExpr
         (( '=' optInd expr )
         | ( expr (comma expr)*
             doBlocks
              | macroColon
           ))?
importStmt ::= 'import' optInd expr
              ((comma expr)*
              | 'except' optInd (expr (comma expr)*))
includeStmt ::= 'include' optInd expr (comma expr)*
fromStmt ::= 'from' moduleName 'import' optInd expr (comma expr)*
returnStmt ::= 'return' optInd expr?
raiseStmt ::= 'raise' optInd expr?
yieldStmt ::= 'yield' optInd expr?
discardStmt ::= 'discard' optInd expr?
breakStmt ::= 'break' optInd expr?
continueStmt ::= 'break' optInd expr?
condStmt ::= expr colcom stmt COMMENT?
           (IIDENT 'elif' expr colcom stmt)*
           (IIDENT 'else' colcom stmt)?
ifStmt ::= 'if' condStmt
whenStmt ::= 'when' condStmt
whileStmt ::= 'while' expr colcom stmt
ofBranch ::= 'of' exprList colcom stmt
ofBranches ::= ofBranch (IIDENT ofBranch)*
                      (IIDENT 'elif' expr colcom stmt)*
                      (IIDENT 'else' colcom stmt)?
caseStmt ::= 'case' expr ':'? COMMENT?
            (IDENT ofBranches DEDENT
            | IIDENT ofBranches)
tryStmt ::= 'try' colcom stmt &(IIDENT? 'except'|'finally')
           (IIDENT? 'except' exprList colcom stmt)*
           (IIDENT? 'finally' colcom stmt)?
tryExpr ::= 'try' colcom stmt &(optInd 'except'|'finally')
           (optInd 'except' exprList colcom stmt)*
           (optInd 'finally' colcom stmt)?
exceptBlock ::= 'except' colcom stmt
forStmt ::= 'for' (identWithPragma (comma identWithPragma)*) 'in' expr colcom stmt
blockStmt ::= 'block' symbol? colcom stmt
staticStmt ::= 'static' colcom stmt
deferStmt ::= 'defer' colcom stmt
asmStmt ::= 'asm' pragma? (STR_LIT | RSTR_LIT | TRIPLE_STR_LIT)
genericParam ::= symbol (comma symbol)* (colon expr)? ('=' optInd expr)?
genericParamList ::= '[' optInd
  (genericParam ((comma|semicolon) genericParam)*)? optPar ']'
pattern ::= '{' stmt '}'
indAndComment ::= (IDENT COMMENT)? | COMMENT?
routine ::= optInd identVis pattern? genericParamList?
  paramListColon pragma? ('=' COMMENT? stmt)? indAndComment
commentStmt ::= COMMENT
section(p) ::= COMMENT? p | (IDENT (p | COMMENT) (IIDENT (p | COMMENT))* DEDENT)
constant ::= identWithPragma (colon typedesc)? '=' optInd expr indAndComment
enum ::= 'enum' optInd (symbol optInd ('=' optInd expr COMMENT?)? comma?)+
objectWhen ::= 'when' expr colcom objectPart COMMENT?
            ('elif' expr colcom objectPart COMMENT?)*
            ('else' colcom objectPart COMMENT?)?
objectBranch ::= 'of' exprList colcom objectPart
objectBranches ::= objectBranch (IIDENT objectBranch)*
                      (IIDENT 'elif' expr colcom objectPart)*
                      (IIDENT 'else' colcom objectPart)?
objectCase ::= 'case' identWithPragma ':' typeDesc ':'? COMMENT?
            (IDENT objectBranches DEDENT
            | IIDENT objectBranches)
objectPart ::= IDENT objectPart (IIDENT objectPart)* DEDENT
           | objectWhen | objectCase | 'nil' | 'discard' | declColonEquals
object ::= 'object' pragma? ('of' typeDesc)? COMMENT? objectPart
typeClassParam ::= ('var')? symbol
typeClass ::= (typeClassParam (',' typeClassParam)*)? (pragma)? ('of' (typeDesc (',' typeDesc)*)? ',')?
              &IDENT stmt
typeDef ::= identWithPragma genericParamList? '=' optInd typeDefAux
            indAndComment?
varTuple ::= '(' optInd identWithPragma (comma identWithPragma)* optPar ')' '=' optInd expr
variable ::= (varTuple | identColonEquals) indAndComment
bindStmt ::= 'bind' optInd qualifiedIdent (comma qualifiedIdent)*
mixinStmt ::= 'mixin' optInd qualifiedIdent (comma qualifiedIdent)*
pragmaStmt ::= pragma (':' COMMENT? stmt)?
simpleStmt ::= ((returnStmt | raiseStmt | yieldStmt | discardStmt | breakStmt
           | continueStmt | pragmaStmt | importStmt | exportStmt | fromStmt
           | includeStmt | commentStmt) | exprStmt) COMMENT?
complexOrSimpleStmt ::= (ifStmt | whenStmt | whileStmt
                    | tryStmt | forStmt
                    | blockStmt | staticStmt | deferStmt | asmStmt
                    | 'proc' routine
                    | 'method' routine
                    | 'iterator' routine
                    | 'macro' routine
                    | 'template' routine
                    | 'converter' routine
                    | 'type' section(typeDef)
                    | 'const' section(constant)
                    | ('let' | 'var') section(variable)
                    | bindStmt | mixinStmt)
                    | simpleStmt
stmt ::= (IDENT complexOrSimpleStmt ((IIDENT | ';') complexOrSimpleStmt)* DEDENT)
     | simpleStmt (';' simpleStmt)*
